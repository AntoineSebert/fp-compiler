%{
open GuardedCommands.Frontend.AST
%}

%token <int> INT
%token <bool> BOOL
%token <string> STRING
%token <string> NAME
%token ITYP BTYP
%token LP LCP LSP RP RCP RSP AMP CAR
%token IF FI DO OD BEGIN END 
%token COMMA COLON SEMI BAR TO
%token NEG PLUS MINUS TIMES AND EQ LE LT GT NEQ OR
%token PRINT ASG SKIP ABORT
%token EOF
%token HIGH

%left AND OR
%nonassoc NEG
%left EQ LE LT GT NEQ
%left PLUS MINUS 
%left TIMES
%nonassoc NOT AMP

%start Main Prog 
%type <Exp> Exp ExprNotAccess AtExprNotAccess
%type <Access> Access
%type <(Exp * Stm list) list> GCList
%type <GuardedCommand> GuardedCommand
%type <Stm list> StmList StmL
%type <Stm> Stm
%type <Typ> BasicTyp Typ
%type <Dec> Dec
%type <Dec list> DecL DecList
%type <Program> Main Prog
%%

Main:
   Prog EOF                            { $1 }

Prog:
    BEGIN DecList SEMI StmL END        { P($2, $4) }
  | BEGIN StmL END                     { P([], $2) }

BasicTyp:
    BTYP                              { BTyp }
  | ITYP                              { ITyp }

Typ:
    BasicTyp                          { $1 }
  | CAR BasicTyp                      { PTyp $2 }

Dec: 
    NAME COLON Typ                    { VarDec($3,$1) }

DecL: 
                                      { [] }
   | DecList                          { $1 }

DecList: 
   | Dec                              { [$1] }
   | Dec COMMA DecList                { $1 :: $3 }

Access:
   | NAME                             { AVar $1 }
   | Access LSP Exp RSP               { AIndex($1, $3) }
   | CAR Access                       { ADeref(Access $2) }
   | CAR AtExprNotAccess              { ADeref $2 }

AccessList:
  | Access                            { [$1] }
  | Access COLON AccessList           { $1 :: $3 }

Stm:
    PRINT Exp                         { PrintLn $2 }
  | Access ASG Exp                    { Ass($1,$3) }
  | AccessList ASG ExpList            { MulAssign ($1,$3) }
  | SKIP                              { Do (GC []) }
  | ABORT                             { Alt (GC []) }
  | LCP StmL  RCP                     { Block([], $2) }
  | IF GuardedCommand FI              { Alt $2 }
  | DO GuardedCommand OD              { Do $2  }

StmL:
                                      { [] }
  | StmList                           { $1 }

StmList:
  | Stm                               { [$1] }
  | Stm SEMI StmList                  { $1 :: $3 }

GuardedCommand:
                                      { GC [] }
  | GCList                            { GC $1 }

GCList:
    Exp TO StmL                       { [($1,$3)] }
  | Exp TO StmL BAR GCList	   		  { ($1,$3)::$5 }
  
Exp: 
    Access                            { Access $1           }
  | ExprNotAccess                     { $1                  }

ExprNotAccess:
    AtExprNotAccess                   { $1                  }
  | INT                               { N $1 }
  | BOOL                              { B $1 }
  | LP Exp RP                         { $2 }
  | MINUS Exp                         { Apply("-", [$2]) }
  | NEG Exp                           { Apply("!", [$2]) }
  | Exp TIMES Exp                     { Apply("*", [$1; $3]) }
  | Exp PLUS Exp                      { Apply("+", [$1; $3]) }
  | Exp MINUS Exp                     { Apply("-", [$1; $3]) }
  | Exp AND Exp                       { Apply("&&", [$1; $3]) }
  | Exp EQ Exp                        { Apply("=", [$1; $3]) }
  | Exp LE Exp                        { Apply("<=", [$1; $3]) }
  | Exp GT Exp                        { Apply(">", [$1; $3]) }
  | Exp LT Exp                        { Apply("<", [$1; $3]) }
  | Exp NEQ Exp                       { Apply("<>", [$1; $3]) }
  | Exp OR Exp                        { Apply("||", [$1; $3]) }
  
AtExprNotAccess:
  | RP ExprNotAccess LP               { $2 }
  | AMP Access                        { Addr $2 }

ExpList:
  | Exp                               { [$1] }
  | Exp COLON ExpList                 { $1 :: $3 }
